# Create a OOP project aroud DNA as a class and create different methods:
    # find restriction enzyme sites
    # find DNA motif 
    # in the translate rna fucntion do:
        # Add selection of string between metioinin and stop codon (stop codon should no appear)
        # Add condition if the protein (after being processed as above) is smaller than x it should no be returned. 
        # The user should be able to specify x. and if x = 0 it outputs everything

class DNASequence:
    def __init__(self, sequence):
        self.sequence = sequence.upper()
    
    def gc_contenct(self):
        c_count = self.sequence.count('C')
        g_count = self.sequence.count('G')
        gc_percentage = (c_count + g_count) / len(self.sequence)
        return gc_percentage

    def reverse_complement(self):
        rc_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
        rc_res = ''
        for c in self.sequence[::-1]:   # Reverse the sequence first
            rc_res += rc_dict[c]        # Direct lookup in the dictionary
        return rc_res
        # or this could be said only with 
        # > return ''.join([rc_dict[base] for base in self.sequence[::-1]])
    
    def complement(self):
        rc_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
        return ''.join([rc_dict[base] for base in self.sequence])
    
    def melting_temperature(self):
        c_count = self.sequence.count('C')
        g_count = self.sequence.count('G')
        t_count = self.sequence.count('T')
        a_count = self.sequence.count('A')
        if len(self.sequence) < 14:
            return  (a_count+t_count) * 2 + (g_count+c_count) * 4
        return 64.9 +41*(g_count+c_count-16.4)/(a_count+t_count+g_count+c_count)

class RNASequence(DNASequence):
    def __init__(self, sequence):
        super().__init__(sequence.replace('T', 'U'))

    def reverse_complement(self):
        rc_dict = {'A': 'U', 'U': 'A', 'C': 'G', 'G': 'C'}
        return ''.join([rc_dict[base] for base in self.sequence[::-1]])

    def divide_in_codons(self, seq=None):
        # Use self.sequence if no specific sequence is provided
        seq = seq or self.sequence
        frames = {}
        for frame in range(3):  # Loop through reading frames 0, 1, and 2
            frames[f'frame{frame+1}'] = [seq[i:i+3] for i in range(frame, len(seq) - 2, 3)]
        return frames
    
    def translate_RNA(self):
        codon_table = {
            "UUU": "F", "CUU": "L", "AUU": "I", "GUU": "V",
            "UUC": "F", "CUC": "L", "AUC": "I", "GUC": "V",
            "UUA": "L", "CUA": "L", "AUA": "I", "GUA": "V",
            "UUG": "L", "CUG": "L", "AUG": "M", "GUG": "V",
            "UCU": "S", "CCU": "P", "ACU": "T", "GCU": "A",
            "UCC": "S", "CCC": "P", "ACC": "T", "GCC": "A",
            "UCA": "S", "CCA": "P", "ACA": "T", "GCA": "A",
            "UCG": "S", "CCG": "P", "ACG": "T", "GCG": "A",
            "UAU": "Y", "CAU": "H", "AAU": "N", "GAU": "D",
            "UAC": "Y", "CAC": "H", "AAC": "N", "GAC": "D",
            "UAA": "Stop", "CAA": "Q", "AAA": "K", "GAA": "E",
            "UAG": "Stop", "CAG": "Q", "AAG": "K", "GAG": "E",
            "UGU": "C", "CGU": "R", "AGU": "S", "GGU": "G",
            "UGC": "C", "CGC": "R", "AGC": "S", "GGC": "G",
            "UGA": "Stop", "CGA": "R", "AGA": "R", "GGA": "G",
            "UGG": "W", "CGG": "R", "AGG": "R", "GGG": "G"
        }
        proteins = {}
        possible_codons = self.divide_in_codons()
        possible_codons_rc = self.divide_in_codons(self.reverse_complement()) 
        for frame in possible_codons.keys():
            proteins[frame] = [''.join([codon_table[codon] for codon in possible_codons[frame]])]
        for frame in possible_codons_rc.keys():
            proteins[f'{frame}_rc'] = [''.join([codon_table[codon] for codon in possible_codons_rc[frame]])]
        return proteins

dna1 = DNASequence('GTGGTCGAAATAAATTGGTGCCCTACATCATAGGAAAAGCCCGGTCTTCG')
# print(dna1.sequence)
# print(dna1.gc_contenct())
# print(dna1.reverse_complement())
# print(dna1.complement())
# print(dna1.melting_temperature())

rna1 = RNASequence('GTGGTCGAAATAAATTGGTGCCCTACATCATAGGAAAAGCCCGGTCTTCG')
print(rna1.sequence)

rna2 = RNASequence('AUGGGAUUUCGGACAUCUGGCUUGUGUAACCUCUUAGGAGCGUUUUGGCUGCAGGGGAGCAAGCAGAGGAUAUGUUAUCAUGGGAAUAAACAUUAUUAUCGGAGGUCAAACAAAAACUACGACGCAAUGGAUAGAUCUACAACAAUAAGUCGGGGCCAACGUGAGAGGGGCAACAGCCCAUCAGCCGUCAUGUACACAGGAGGAGGCACCCCUAUCUACACUCUGCUACAGUAUGCUGGGGGCUGCACCAAUUGUUUUGCUGUGGUACCUAACGGUUAUAAGCCUGGGCAUUAUCAAGGUGUUCAUCUGGGGGUGGAACAACGGCCGAUGUAUCCGAACCGACAAAACUGCGCCGUGUGUGGGUCGAUCUUCGAAACCAAUCCCGCGGGAUUCGGGGAAUGCUGUAUGGUAGAGAGUGGCGACGUGCUACCAUUACGGCUGGUGUACGCGUUCCAUAUGAUCAGCAUUGAGAGACGCUGGUGUAUGUCGUCGAACCGUCCUCCUUACCCGGAAAGCUGUAGCCAUUUCAGCACCCCGACCAAAAGACAUGGGUGUGGGAUACGCCGCUCCGAGACCUUAUAUCUCCACGCUUUACCUCUCGCGCCGCUUAUCUCUUCAACCCUCUCCCUAGGGAUCGCAGGACAAGAUGACCCAGUUCCGCGACACUCCCGAUGGUGUAUUGAAACAGGAAACCUUUCGGCGAUUAGAACCGUGGUGUUUGUCCAGGUUCGUGGGGCCCUAGGGGAACUCUCUAUACGCGUAGGAGGCAGCUUGAGGAAAGGAACAAGACCUAAGUUAGCCGUAAUUGUACACCCUCGUCUUAUUAAUUUGGGGACAGACCUGCUAAGCGUGAUAACUUCGGGGCGAGGGCCCUGCAGUAGCUUUCUAUCGACACUAAAGCAGCUCCUAAGCAUAGCGGUGCACUUGACAGCAAGAAGCACUAGCUAUCAGUCGAAGAAGUCGUGUGCUGUGUUGACACCGAAUGCGUACUAUUUUGUAUACCCUCCCCUUACAAGGAUAUCUAUCGCUGAGUACCCCUCGGCUGUGGCAUUGGUAGGUAUCCAAUUUCGCACUCACGUCUACACUCAUGUGUCAUUGAUACUCGCGAUUAGAUGUUCAGUCGGAUCUAAAAUAGCUAUUGAUUUUGAUCAAUACUGGCGUCUCCACGGUGCCCGGCCGACUAGCAUGCUGACGAUGCGGUCCGAGGUACCUCUUGAUGCAUUCGCAGGUCAAUUGCGGAUCCUCAGCUUCGUGUAUUUACAUAGCACAAAAGAGGGAGGGCAUAGAUACGAGCCUCACUACAGCUCGAGAUAUCUCGGCAAGCGCUUUGGUCACAAUCGGAGUCCGAAUUCCCUUAGCCCCUCGCCACGGCUGAGCAUUGCGCCUCCCAUUCCCGUACCCUCAAUCCAGACCAAGUGUAUACCAAUUCCUGACCACUUAGUCGACGUUCGUUCGCAUGGGCUGCAGGGCGAAAUACAAACUGUCCGAUUGGAUUAUCAGGAUCAGAGACCGGCCUGGGUCUUGAGCCCGAUACUGAAAAACCAGCCGCAGAUUCAGAACAUUAGGACCUGGGGUCGAGAAACGUCAAUCGAACGUUCCCACCUCACCGCUUGUCCAGAGGCACUCAUCGACCCAGUUCCAAGGAAACGGAGGAGUGGCGUUUCUCCACCCCUUAUAAUUUGGCGGAAUCGUGACAAGCUCAAGAGGAUUUGGUUUGAGUUUGCAUUGGUGAUUAAACUUCGGGGACGGUUCUUGCAUACACCAUCAAGGAGAUACGACAAAGGCCGCUGGUAUUUAAACUAUGAGGGGGCCAUAGAGUUAGAAUUUAAAAAGACCGUAUUUCACUCCACCAAGCUGAGACCACGGAACCCUGCCAAACGCCCUGCGUCGAUUUUCACAGUUCUGCAUCGGUAUACGGUUUGCCGGAGUCAAACAUCGCGCUCUCCCAUCAAACUAGUCUUAGCGUGCAGGUACAACGUGAGGAGCAAGAUGAUCUUGGCUUACAUGAUGGAUCGUUCUAAGACUAGCAUCCGAUUUCUCUUCCAUCCCUUAUUAUUCUAUUACUCCAACCGACGUCGAACUGCAGGGCAAAAGGACUCUCCUCUCGUUAGCUCGGGCAAAGUCGAGGAGGCCGUUAUGAACUGUCUCGCGAAACUGAGUACCACCUUGGACCCAUUAAGCCAGAGCGACUACAAGAUGAGUGUGAAGGAUCUGCGUUGCGGCAGCGGCCGGGAACAAGUGCGGGGUGACUGUAGCGCUCCCGUUGAAAUCAAUAGGUACUGUGUGUUCCCGCUAGUAAGUUGCAAUUACAAUGGGAGCGGGCCGUACGGACCAUUUACGCAGUUCGUAGUAAGCAAUGAGUCCCCCGGAGUCAGGCGGCUUUACACUUAUUACGGACAUCUUACUCCCCAUUACAUUAGCACUGACCUUGAGGGUCAAAUCGUCCCCUAUCGAAACCCUAAACGGUCGAACAGCUGGUUAGCAUGUGACUCUCCUCUGAAAUUAGUUGACAACCCGGCAAGCAAUCGGCCAUUCACGUUGUUUGCUGUUUUCAAGAUCUCACAGCGUGGCGUGAAGCUGCAAGCGAGUGAGCCCGCGUACAUACUUGGGGCAGCCCUCUAUCUCCGCCUCCUGCCGGGACUCGCCGUGGGCGCUGCCUCUGCCCGCCAGGUCCGCCGUAAAAGUCAUUCAUUACAUGCUUUUAGUGUGAAACUAUUACGAUUCACGAGGAGUGAAGAAGGUAUUUGGAAUCACUUCUCCAUGCCAGAUCGCUGCCCCCGAACCCUACUAAGUUUUUCCGUCACAGGUCCUGGCUGUAUGCACCAAUCGGAUCGGUUGCCUGAAUUAAACCUCUCCCCCGAUACUACGGCAACUCUCCAAACGCCUUUAAUUCUUACUCCAAUACCAGACUACGCCACUGGGGUUUACCAAGAUCCUUUCAUGAAUAUACUUAGGCCGACGCUCUACCCCUCCCGGUGGCGAGCGGACGUGCGGUCCAGUAUUAUCCAAGUCCUACGCUUCGUGUUCGAGUUCCCUCGGAGCUUUGGAUCCAGGCCAGCACACACUAGUACAGUUUUGAUGCCGGGUCUGCGCACAGCCUACAAGAGCGUUUGUGGCACAGGAUCACAUCCAAAGGUCAGUAGGCCUAUAAAAAGUCUUGGGCGCGCUCGUAGACCCGGAGGACUACGCGUAGCAAAGCGAAAGUUUCUAACAGGCGGAACGUAUACUGAAACAGUAGAUUAUCUUCUAUCAGUCGCAUUUAAUCGCAUAUGGCCACUGCUAGUCCUUGUCAACCUCGUGUGGAGGCCGGGGUCCGUCUGUGGUAACGCAUCUUCGACCACCAUUCGAGUAGCUUUCGAAGAUACGCAACAGAUACAUAUAUCCUCCACUUCUCUUGGUACGGUAGCCUCGACCCAGCACACCAUGGCUAACGAAAAGCCCGCGUCAGCGCUACCCCUAACUGAUCCGACCGUAUUACAUGCCCAAACCGGACGCGAAUACGUUUCUGCGACGCAUUCCCACCGGUUGGUAAGAGGCCCGAUGGGACUGUACGGGGACGCUCUAUUGCACAAACGGCCGUCUUGGUUCUUCCGCUCUGUAACUUCCUGGGAUGGACCGUAUCCACAGGACGUGAAAAAAAUGCACAUGGAUAACUCCGAGCACGAACAAGAUGGGUCGAUCACCAAUGCCGUAAUCGACUCUCCACGGAUCUCUUUCCGCAACGGAUGGCCCACAGUGCCACUUAGUAGGGGAUGCACGGGUAAUGUAUUAUACCAAGACAAUGUCCGAGAGUUCGCCGCCUAUAGAAGACGCUAUGUGGCGAAAUCGCGAUCUCCAUGGCUGGAGCAUUUCCUGUACUAUGACGGAGCGAACACGUUGCGCUGUCUUACGUCGCGAGGCCCUUCGGACGGACCGUCGCCUCUCGACUAUGACCAUACAGUCCAAAGGGAUAGAUUGCGGCGCAACAUGACGAGAGGUAGGGGUCCGCGGAAGCGACGUGCGUCAUGCAUAGGCACAGCGGCGGGACAUUGGAUGGAUGGCUCUGGCGCCUGUCGGAGGCGGACGCGUCUAUCAUGGUCAGGGCUCAUCUGGGCUCUGAGUUCACCGGGGCUCCCCGUGGGGAGCUCCUACUCUCGCCCCUACCAUCUUACACGUACUUAUAUUGCGCAGCGGGGGAUAGCGAGGUUUAGACCGCCGUUGCGAAUUGUGUUUCCAAAACGUUUUCGCAGCGUGGAAAGCUGUUCAACCAAAACUCGCAUUCGGGCGUCUAACGCUCUUUCGCCACCCAUCCCACGUAUUGUAAAUCGUCACCAAGAGAGCAGCAGCCCAGCGUUUUCGCGAUCGGCCUAUAUGAGGGGUGCCUUUCUUCAAGUCGAAGGGAGCGCUAGCUAUAAUCCCCCGAUAAUCAGUUCGGCGGGUACUAAGGAAUCGAAAAAGCUCAAACAAAAUGGAAGACUUCUUGCUGGCCGGCCUCGAGGUCAUCCGGAUAGUGUAAAGAUUUCGUCACCAUCACCGGACACUAACGGAUUGAAACCCCCGAUAGACGUCGUAUUAUAUUUGACCCUGCAGCCCCAAGUAUCUAGGCAACUGUGCAACCAGGUAUUUAGCAGUGGGGAAUUGUACCAGUUCGUUGGCGUUACCCGAGUAGUACGGUUCUCACUAGUACGGGUUACACACUGCACGGUCAGAAACCGGACUUCCUCCCGGUUUGACAUUAGUCGGCUCAGAGUAAUCAUGUGGCUGAAGAGCAUAGCAAUUGGGUGCAUAGCUGCUUGCACUUCCGUAUUGUUGGCGCGCCCCGCGGCGGUCUUUAAACUUGUAAGUGAAAGCCAAAUAGCGAACCACUUCCAGCAGAUUGACACCUCUGACGGAUUGGAGGUCAGUGCUGGAUUUUGUGAGGGCGUGGGUUACAAUUGGGGCUAUGUUGAUCAAACUAGUAUCUUGCACCUUAUCCUAUUACAGCAAAAUCGGCGGAUUUUGCAUACAUCCGUGCACGAGGCUCCCUCGCACUUAAUUCAAGACUUUAUCAAGACUUCUCAUAUCCGGAUACAAAUGGUCGGUGUGGUAUACGGUGUUACCGAGUCAGUCAGGGCUCACACCAGGCUAGUUUCACUCCAGGGCACCACUAUCGAUUUUCAACGACCCGGAAUCAUCCUGCUCCCGUCCAUUUUCGAAAAACGUUACUGCCGCCCGAGGCGUAUCUUUAUUGGGUCUGCGAGAAAUUUCUUAACGCACGGGCGACACAUCUUGUUUAUUCUUAGACCCAGCAAAAGAUUUGCACUAAACCUCACCAUGCCUCUGCUUGGUUCCCCAGAUAUUGUCAGCGGCCUGCGAUACCUCGGUCACUGUGUCGAGAGGAGACGCAGUAACCUGCAGAAACGCUCACGGAGUCUCGUCUUAUUAUUGGGCCUCCCACUCAGAAUACUUAACAUGAUUGCACAGUUACGCCACCAUUGGGGAGUGAUUUCUAAUAAACGUGAGUACCUCAAUGAACCAAAUAACAUAGCACGCUCGAUGGAAAAGGGAUCCUUGCCAGUUUCAGCCCAUGGUGAGUCCCAUGAGACUAUCGGACUUCCCAAAACCGAUAGCUCGUGUGGCUCCCUUCGUCGACAAGUUAUACGCGACAUGUGGGCAUCUGGAACUCGACCUACCGAGCAUGCAAUACAUAAUGUCUUACUCAAGACCAUCUCUUGUUCCAAAACUCCCCUUCUCCCCUGGAAAUUGAUUUCAUAUCCGGAGGGGGAUACACACUACGGCGCGGAACCACGUUCCGCCUGUUACAGUACGGAGAAAGUACGGAUGUCGGGGCCUACAGUAGCUCCUCGUGUCGACAGCAAUAUAUUUCCCCACGUUAGGACCUUAACAAGGCGAACACGCGAUGGAAUGCCCUAUGAGUGCAAAUCCGUCAGCAAUCUGACGUCAUUCAGGGCUGGCCGGGUAAUAGGCUCGAAGUGCGAGGGGUGGUACUACCAGUGCACGCGCGAGAAUAGAUAUGCUCGGGCGCAUGUCUCGUGCCUCCCCGGGUUUGGCGAGAAAAAGAUUUCACGGAGAACGGCGUUGGAACACACUAGUCUGGUUCUUCGACCUUGCAUUCACAACGGCUUUUAUCGUCCACUGCGGGAUCGGAUACAAGGUCGGAUUGGGGUGAACAACAGAGUAACAUUAGCAUCCCCAGUGCUGUAUUAUAGUAAUACCUCGUCACCACGUGACAUAUAUCGCCUGGCCAGCAGCGGUCGCUCCCCUAGGCCGUUAUUGAAUCAGAAGACGAGACGGGUGAUCGCCAACUCGGCUGCCGAGACUAAUCCCCACAAAUGCCCCUCGUCUAGUCGCUCUCGUACGGGCUCCCCUAGGGCCUCCCUGGCUCGCAAUUUUCGCCUUGCUGACCCUUCCGCUGGCUGGAAGACGAUUACAUGCACACUGCCUAAGUCAAAGUUUGUAUGGUGCUCUACUUCGCUGGACUUACAUCUCGACUCCUUCAGCCGCGGCACUCUGUUAACCUCAGGGGCGCGUGGUGCAUACUCUGAUGAGAUUGUAGUGUGGGAUUUCUCGUUAAUCGCGAUCUACACAUCGAUCAUGAGAAGGCGUAUUCACAAGCGCUCUUCUACGGCGUGCCGCUUCACUCUACAGUUCUCGGCGUAUGUACGCUACCUUCUGUCCUCGAAGUUGAGAGUCUACGAGAAUAGCAUGGAGUAUAGGACUCUCAUUAUACGGAUUUAUUUUAGAGGACGUCAAUGCGGCGAUCGCAUUGAGGGGUGCCCUAGCAUAGCUCGCACCUUGACUUGGGUCACCUCGUGUUGUGUCUUGACAUGGGAUUCCAGGGGAGGCCUGACGAUGAAUAACCGUCACAUCCUAUGCCACUGCCCUAUCUUCUUGGCCUGCGGGGCCGGUGCACUAUGUGAACACCGAUCGUCAGCCGAGCUCUGCCCACUACCAUGUACCAGCUCACUGACGAAGGCCAACAGUCAUUGCAAUGAAUCGCCCGAGCAUGGAGUUUUCCUCGCUCUUUCUUGUCGGUUCCUACCAUUACUCGAAAAGCUCCAGAACAGCCACAGACGCCGGCGUGAUAUUGAUGAAGGUCUAGUUUAUAGAUCCAUCACACCUCGUUGUAAACCUUGCAAACCUGCCCACUGGCAACCAAUUAGCCUGCUAACGGAUUUUCGGACUGGAGGAUCAGAGGUGAUGAGACGACUCUCGGUGAGAAGAGCUAAACUUCGAUAUACUCCUGAUUUUUCUUUCAGGUUGGUGACGCAAGGAACCCGUCUAGCACGGCGGAGUGAGGGUCCCCCUAUGAUGGAAGUAUCUGGCGAGUUGCGACGCAAGAAUAGCGAGCGGAAUUAUACUUUAUCUUCUAGUUCGAUUAGCGUUGUUAUAAGUACGACAUGCCCGCGCCGGCGACUGGUCCUUAAGAAGCUACAGUUAUCUCUUCUUUGGUUGAUGAAUCACAAAUGUCCACGGCAUCCCGGAGCACUAGUUAACCUGAGAGCUCGUUCCAUCUUCGAGCGUUUCCUUCAUCAACCUAAACCACGAGAACGAUGCGAAGCCAACGCGGCCGGAAAAGGGACUCCUAACGCCUGUGAUCACAUAGCACGUGUAACGAAGUUCAGUACUAAAAACGGCGCAGCUCUAAGACCGCGCCGAGCAUCACUACGCUACCUAUCCAUCCAACUACAGAUAUUUAACCCCAACGUGGUGGCAAGCCUACCCACGGAACUGGAACCAAUACUACACCAGGCGGCCCCAUACAUGCAAAUACAACGGAACCGACACGUCCGUCUAGAGGUGCUCACGGGGCUUGGCAGUGCAUCGUCGUUAGAGAGUAGACCGCAGCUCUCACCAGUCGGGUCCUUCGUUCCCCUAAACGCCGCCCUUCGCUCUUGCCCGCCUACACCCGCCUUAAGAAAUCAGGAUGUAUACCCGGCGCUAAACAGGGUUCCAACACUAUGCGGUAGCGGUGCCAGAAGGGUAAUUCAACGUUCGUUCCGCAGGAUGAUUACCGUUCGGCCACUCGUCAGAGCGCUAGCGACGAUGUACUUUCCUAGUAUUUCAAGAACUAGCGGCGUCAUUAGUGACUCGCUAACCCCCGGGAGCUCUCUGACGGUCUGUCUUUGCGCGGGGCGCGAAUUUGCCUCCCUUGGGCUACCCUACAACCUAAUGUGCCAUCGAGAAAGUCUGCAUGGGCGGACGCAUGCGCCAACCACAGGUACUCGGACAACGCUGGGAUGUGAUAUGGUUUCUUCCGUGAAUAUUAAUUAUGACUUUACACUAAUGGCAGGUGAAGGGGUUGCCGAGACCAGAGAAGUUGCGACGACUUUCACGAGAGGGUCCCUGGUUGACGGCAAAUUGGGGAUAAGUCAUUUCCGGCCGUUAUUCGAAUGCAGCUUCAUUGCAUCAAAAAAGUUGCUGGUCGUGACUGCCGUUGACCGCUCGAGAGAACUGAGGGGAGCAAAUGUACCCCUCCCCGGGUUGUUAAAGAGAUUUCAGAAGAUGAUCGAAGUUGUUCGCCCAACUGGGUCGGCAGUACGAGUCCACGACAGGCUAGGACUCCGCCCUCCGCCUGUAACCGCAGCAUCCGCAGGACUCUACCGACCGGCCGCCUCGAACAAGUGUUGCGCCCAGGCGUCCGGAGUGACCGAUUCAUCCAGUGCCAAGGUGUCGGCAUAUAGCCAAGACAUCCGAUGCGAGGUGCCGCAGUACCUUGUGGCGAUCAAGCCCAACUGCCUUUUCCCCUACGCGCUACGCCAGCUAGCAUACGUACAAUGCAGCCCUGGUAUUUUGGACAUUUCUGUCGAUCGCCGUCACCCUGCUUCGCAACAGGGUCACCUGCCGUCCCGAGAUUUGGUAGGGAGCGGUGCAAGGCUCCGCACUGCGUCCAUCCCCGCUACGUGGACAACCAUAAUGCAACAAUUGUGCCCCGGAGUAUCAUCUGCACCUAACGUAAAGUACCUCCUGCCCACAAUAGACGAUGAUCUACGCAUUAGUUCGGUUGGCUCUGGCUGGGUCUCUAACCUCCCCAUACCUAGCAUGCUGAAUACAUUAACCAUGUGCGGUAUCGGUAAAGUGACCGGCGCUCAUCCGAGCAUUAACGUAAUGCGUUACACGGCUUGCCCCCCCAUGUACAUUGACGUUUGCUCGGGAACAAUCAACCAUAUGUUUGUACUUGCAUCCUGUGAGGGGAAUACGCGUGGUAGGUACUGGAGUUGGCCGGGAACGUCAGGAGUAAACGCGUCACACACUCACUACCUGCCCUAUGCCGGAUUGUUGCGUUCAGAGCACGGCAGCACUAUAUCCGAAAUCUACGAUUCGACUCCUUGUCCUCAUGCACCAUACUAUAAGUCAUUGCAGCUUAGAGGUCUGGGAGGGGCUCUACACGAAACAAAAGAACCCGCGUUUGCUCGUCAUAACCAGUCGGGCGAGGUUCACCGCCCAGCCGUGCCUCCUAUAAUACACCUAGGACCCAGCAAUCCUAGCAAGAGGCGACAAGACGUAUUUCUCCGCCAUGGAAGGAGACUAACCCAUUUAGAAAACCAUUCUGGCCUUACGUCUGUCCUAACACCCUGGACUGGGGAUGCCGUGAACUUCACAGCUGGUCCGCCCACCGUGGGCCAUGGAAGGAGGUAUAAAGAUACGAUUGUAAUGUAUGUGCCCGCAACAUUUACAAUGGGCAUUUCUCCAGUCUGCACCAAAGAUCAGCGUAGUAAACGGGCCCUGGAUCUUCUCCGGUCAAAUUGGAUUACCUAG')
print(rna2.sequence)
print(rna2.divide_in_codons())
codons = rna2.divide_in_codons()
proteins = rna2.translate_RNA()

print(proteins['frame1'])

